"use strict";angular.module("angularLodashModularized",[]).factory("lodash",function(){return window._}),angular.module("turtleCommandApp",["ngAnimate","ngAria","ngCookies","ngMessages","ngResource","ngRoute","ngSanitize","ngTouch","ngPatternRestrict","angularLodashModularized"]).config(["$routeProvider",function(a){a.when("/",{templateUrl:"views/main.html",controller:"MainCtrl",controllerAs:"main"}).otherwise({redirectTo:"/"})}]),angular.module("turtleCommandApp").controller("MainCtrl",["$scope","Grid","Animal","Compass",function(a,b,c,d){a.inputStr="",a.inputPattern="^[flrFLR\\s]{0,}$",a.Grid=b;var e=c.createAnimal("Turtle");a.Animal=e,b.reset(),a.movementHistory=[],a.resetGrid=function(){b.reset(),e.reset(),d.reset(),a.inputStr="",a.movementHistory=[]},a.resetAnimal=function(){e.reset(),d.reset(),a.inputStr="",a.movementHistory=[]},a.commandAnimal=function(b){try{e.reset(),d.reset(),a.movementHistory=[];for(var c=0;c<b.length;c++){e.move(b[c].toUpperCase());var f={command:b[c],coordinates:e.getCoordinate(),direction:e.getDirection()};a.movementHistory.push(f)}}catch(g){console.log(g.message)}},a.move=function(b){a.inputStr+=b,a.commandAnimal(a.inputStr)}}]),angular.module("turtleCommandApp").controller("AboutCtrl",function(){this.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"]}),angular.module("turtleCommandApp").factory("Compass",function(){var a=0,b=["N","E","S","W"],c=a;return{goRight:function(){return c===b.length-1?c=a:c+=1,b[c]},goLeft:function(){return c===a?c=b.length-1:c-=1,b[c]},getCurrentDirection:function(){return b[c]},setPointer:function(a){return c=a,this},setDirection:function(a){c=b.indexOf(a)},reset:function(){return c=a,b[c]}}}),angular.module("turtleCommandApp").factory("Animal",["Turtle",function(a){var b={Turtle:a};return{animalInst:null,createAnimal:function(a){try{this.animalInst=new b[a]}catch(c){console.log(a+" is not supported at present")}return this.animalInst}}}]),angular.module("turtleCommandApp").factory("Grid",["lodash",function(a){function b(a,b){this.x=a,this.y=b}var c=5,d=30,e=a.random(c,d),f={collection:[],getBlocks:function(){return this.collection},isBlock:function(b){return a.filter(this.collection,b).length>0},push:function(a){this.collection.push(a)},reset:function(){this.collection=[]}};return{generateGridSize:function(){return e=a.random(c,d),this},generateBlocks:function(){f.reset();for(var c=a.random(1,Math.ceil(e/2)),d=0;c>d;d++)f.push(new b(a.random(2,e),a.random(2,e)))},getBlocks:function(){return f.getBlocks()},setBlock:function(a){f.push(a)},isBlock:function(a){return f.isBlock(a)},setGridSize:function(a){return e=a,this},getGridSize:function(){return e},getMin:function(){return c},getMax:function(){return d},reset:function(){this.generateGridSize(),this.generateBlocks()}}}]),angular.module("turtleCommandApp").factory("Turtle",["Compass","Grid",function(a,b){function c(a,c){a.incrementY(c),b.isBlock(a.getCoordinate())&&a.decrementY(c)}function d(a,c){a.incrementX(c),b.isBlock(a.getCoordinate())&&a.decrementX(c)}function e(a,c){a.decrementY(c),b.isBlock(a.getCoordinate())&&a.incrementY(c)}function f(a,c){a.decrementX(c),b.isBlock(a.getCoordinate())&&a.incrementX(c)}var g="Turtle",h=1,i=1,j="N",k={N:c,E:d,S:e,W:f};return function(){this.whoAmI=function(){return g},this.reset=function(){h=1,i=1,this.changeDirection("N")},this.setX=function(a){h=a},this.setY=function(a){i=a},this.getX=function(){return h},this.getY=function(){return i},this.incrementX=function(a){return h<b.getGridSize()&&(h+=1),this},this.decrementX=function(a){return h>1&&(h-=1),this},this.incrementY=function(a){return i<b.getGridSize()&&(i+=1),this},this.decrementY=function(a){return i>1&&(i-=1),this},this.getCoordinate=function(){return{x:this.getX(),y:this.getY()}},this.changeDirection=function(a){return j=a,this},this.getDirection=function(){return j},this.whereAmI=function(){return this.getX()+","+this.getY()+" "+this.getDirection()},this.move=function(b){var c=this.getDirection();switch(b){case"F":k[this.getDirection()](this,c);break;case"R":this.changeDirection(a.goRight());break;case"L":this.changeDirection(a.goLeft());break;default:throw new Error("Invalid Direction")}return this}}}]),angular.module("turtleCommandApp").run(["$templateCache",function(a){a.put("views/about.html","<p>This is the about view.</p>"),a.put("views/main.html",'<div class="alert alert-warning"> <strong>Input command string (eg. fFlRRf) (OR) use \'L\' \'F\' \'R\' buttons respectively.</strong> </div> <div class="jumbotron"> <div class="form-group"> <label for="usr">Input Command:</label> <input type="text" class="form-control" id="command" ng-model="inputStr" ng-pattern-restrict="{{ inputPattern }}" ng-change="commandAnimal(inputStr)"><br> <button ng-click="resetAnimal(inputStr)">Reset {{Animal.whoAmI()}}</button> <button ng-click="resetGrid()">Reset Grid</button><br><br> <button ng-click="move(\'L\')">L</button> <button ng-click="move(\'F\')">F</button> <button ng-click="move(\'R\')">R</button> </div> Auto generated Grid Size -> {{Grid.getGridSize()}} x {{Grid.getGridSize()}} <br> Blocks -> {{Grid.getBlocks()}} <br> <strong>Current Animal Position -> {{Animal.whereAmI()}} <br><br></strong> <div ng-if="movementHistory.length > 0" class="pre-scrollable"> Movement History: <br> <div ng-repeat="history in movementHistory track by $index"> {{history.command}} -> {{history.coordinates.x}}, {{history.coordinates.y}} {{history.direction}} <br> </div> </div> </div>')}]);